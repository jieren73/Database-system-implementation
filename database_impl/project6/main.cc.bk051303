#include <iostream>
#include <string>

#include "Catalog.h"
extern "C" {
#include "QueryParser.h"
}
#include "QueryOptimizer.h"
#include "QueryCompiler.h"
#include "RelOp.h"
#include <fstream>
#include <vector>

using namespace std;

extern struct FuncOperator* finalFunction; // the aggregate function
extern struct TableList* tables; // the list of tables in the query
extern struct AndList* predicate; // the predicate in WHERE
extern struct NameList* groupingAtts; // grouping attributes
extern struct NameList* attsToSelect; // the attributes in SELECT
extern int distinctAtts; // 1 if there is a DISTINCT in a non-aggregate query
int typeOfInput;
/* typeOfInput
 * 0 = query
 * 1 = create table
 * 2 = load into table
 */
 typedef struct yy_buffer_state* YY_BUFFER_STATE;
 extern "C" YY_BUFFER_STATE yy_scan_string(char*);
 extern "C" void yy_delete_buffer(YY_BUFFER_STATE);
 extern "C" int yyparse();
 extern "C" int yylex_destroy();

 string dbFile = "catalog.sqlite";
 Catalog catalog(dbFile);

 int main()
 {
   QueryOptimizer optimizer(catalog);
   QueryCompiler compiler(catalog, optimizer);
   while(std::cin)
   {
     string _input;
     cout<<" Please enter a number"<<endl;
     cout<<" 0 for executing queries\n 1 for creating table\n 2 for loading data\n";
     cin>>typeOfInput;
     if(typeOfInput != 0 && typeOfInput != 1 && typeOfInput != 2)
     {
       cout<<"Error input!"<<endl;
       continue;
     }
     getline(cin, _input);
     if (_input == "exit") {
 			break;
 		}
    YY_BUFFER_STATE buffer = yy_scan_string(const_cast<char*>(_input.c_str()));
    int parse = yyparse();
    yy_delete_buffer(buffer);
		yylex_destroy();

     if(typeOfInput == 1)
     {

     }

     else if (typeOfInput == 0) {

 			// at this point we have the parse tree in the ParseTree data structures
 			// we are ready to invoke the query compiler with the given query
 			// the result is the execution tree built from the parse tree and optimized
 			QueryExecutionTree queryTree;
 			compiler.Compile(tables, attsToSelect, finalFunction, predicate,
 				groupingAtts, distinctAtts, queryTree);

 			cout << queryTree << endl;

 			queryTree.ExecuteQuery();
    }
     //cout << "Enter a query and hit ctrl+D when done: " << endl;
   }
   return 0;
 }
